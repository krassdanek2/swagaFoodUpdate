const { Markup, Scenes: {WizardScene} } = require("telegraf");
const { Logs } = require("../../config/database");

module.exports = new WizardScene(
    "customError",
    async (ctx) => {
        try {
            const msg = await ctx.reply(
                `<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏</b>`,
                {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('–û—Ç–º–µ–Ω–∞', "cancel")],
                    ]).reply_markup,
                }
            );
            ctx.scene.state.data = {};
            ctx.wizard.state.msgId = msg.message_id;
            return ctx.wizard.next();
        } catch (err) {
            console.log(err);
            await  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            if (ctx.updateType == "callback_query"){
                await ctx.telegram.editMessageText(ctx.from.id, ctx.wizard.state.msgId,ctx.wizard.state.msgId,"‚ùå –ù–µ –±–∞–ª—É–π—Å—è", {
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]
                    ]).reply_markup
                }).catch((err) => err);
                return ctx.scene.leave();
            }

            if (!ctx.message.text){
                await ctx.telegram.editMessageText(ctx.from.id, ctx.wizard.state.msgId,ctx.wizard.state.msgId,"‚ùå –ù–µ –±–∞–ª—É–π—Å—è", {
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]
                    ]).reply_markup
                }).catch((err) => err);
                return ctx.scene.leave();
            }
            await ctx.deleteMessage().catch((err) => err);

            const log = await Logs.findOne({
                where: {
                    id: ctx.scene.state.logId,
                },
            });

            await log.update({
                error: ctx.message.text
            })

            await ctx.telegram.editMessageText(ctx.from.id, ctx.wizard.state.msgId,ctx.wizard.state.msgId,`<b>ü§ñ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞–º–æ–Ω—Ç—É <code>${log.cardNumber}</code> –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É: </b><code>${ctx.message.text}</code>?`, {
                parse_mode: "HTML",
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', `log_${log.id}_setStatus_customError`)],
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
                ]).reply_markup,
            }).catch((err) => err);
            return ctx.scene.leave();
        } catch (err) {
            console.log(err);
            await  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
            return ctx.scene.leave();
        }
    }
);